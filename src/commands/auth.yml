# based on https://github.com/CircleCI-Public/gcp-cli-orb/blob/master/src/commands/initialize.yml
description: >
  Initializes the gcloud CLI and logs in to the Artifact registry.

parameters:
  gcloud-service-key:
    type: env_var_name
    description: |
      Name of environment variable storing the full service key JSON file for the Google project.

  gcloud-disable-prompts:
    type: boolean
    default: true
    description: |
      True answer assumed for all user prompts. Will set CLOUDSDK_CORE_DISABLE_PROMPTS=1 which
      is helpful to avoid spamming --quiet and sometimes forgetting it

  google-project-number:
    type: env_var_name
    description: |
      Name of environment variable storing the Google project numeric ID to set as
      default for the gcloud CLI.

  google-project-id:
    type: env_var_name
    description: |
      Name of environment variable storing the Google project ID be used
      in generating the workload identity audience.

  google-service-account:
    type: env_var_name
    description: |
      Name of environment variable storing the Google service account to be impersonated
      by the CircleCI job.

  google-compute-zone:
    type: env_var_name
    description: |
      Name of the environment variable storing the Google compute zone to set as
      default for the gcloud CLI.

  google-workload-identity-pool-id:
    type: env_var_name
    description: |
      Name of environment variable storing the Google workload identity pool id
      to be bound to the circleci job.

  google-workload-identity-pool-provider-id:
    type: env_var_name
    description: |
      Name of environment variable storing the Google workload identity provider pool id
      to be bound to the circleci job.

  artifact-registry-region:
    type: env_var_name
    default: REGISTRY_REGION
    description: |
      Name of the environment variable storing the Artifact registry region e.g.
      us-central1-docker.pkg.dev, europe-west1-docker.pkg.dev.

      If no value is set for the environment variable, artifact registry authentication is skipped.

  artifact-registry-type:
    type: string
    description: |
      Type of artifact registry to authenticate, must be in:
      - ""
      - "docker"
      - "helm"
      - "npm" (to be implemented)
      - "pip" (to be implemented)

  oidc-token-file-path:
    type: string
    default: $HOME/oidc_token.json

steps:
  - run:
      name: Initialize gcloud
      command: |
        if [[ "<< parameters.gcloud-disable-prompts >>" = "true" ]]; then
          export CLOUDSDK_CORE_DISABLE_PROMPTS=1
        fi

        # disable analytics
        gcloud config set core/disable_usage_reporting true
        gcloud config set core/disable_file_logging true
        gcloud config set component_manager/disable_update_check true

        echo $CIRCLE_OIDC_TOKEN > << parameters.oidc-token-file-path >>
        # Create a credential configuration for the generated OIDC ID Token
        gcloud iam workload-identity-pools create-cred-config \
            "projects/${<< parameters.google-project-number >>}/locations/global/workloadIdentityPools/${<< parameters.google-workload-identity-pool-id >>}/providers/${<< parameters.google-workload-identity-pool-provider-id >>}"\
            --output-file="${HOME}/gcloud-service-key.json" \
            --service-account="${<< parameters.google-service-account >>}" \
            --credential-source-file=<< parameters.oidc-token-file-path >>
        gcloud auth login --brief --cred-file "${HOME}/gcloud-service-key.json"

        # configure project and region
        gcloud config set project ${<< parameters.google-project-id >>}
        gcloud config set compute/zone ${<< parameters.google-compute-zone >>}

  - when:
      condition:
        and:
        - equal: [ docker, << parameters.artifact-registry-type >> ]
      steps:
      - run:
          name: Authenticate to the docker registry
          command: |
            if [[ -z ${<< parameters.artifact-registry-region >>} ]]; then
              echo "Environment variable ${<< parameters.artifact-registry-region >>} not set, skipping artifact registry authentication"
            else
              gcloud auth configure-docker ${<< parameters.artifact-registry-region >>}
            fi

  - when:
      condition:
        and:
        - equal: [ helm, << parameters.artifact-registry-type >> ]
      steps:
      - run:
          name: Authenticate to the helm registry
          command: |
            if [[ -z ${<< parameters.artifact-registry-region >>} ]]; then
              echo "Environment variable ${<< parameters.artifact-registry-region >>} not set, skipping artifact registry authentication"
            else
              export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"
              gcloud auth application-default print-access-token | helm registry login -u oauth2accesstoken \
              --password-stdin ${<< parameters.artifact-registry-region >>}
            fi

  - when:
      condition:
        and:
        - equal: [ pip, << parameters.artifact-registry-type >> ]
      steps:
      - run:
          name: Authenticate to the pip registry
          command: |
            # https://cloud.google.com/artifact-registry/docs/python/authentication#sa-key
            if [[ -z ${<< parameters.artifact-registry-region >>} ]]; then
              echo "Environment variable ${<< parameters.artifact-registry-region >>} not set, skipping artifact registry authentication"
              exit 0
            fi

            pip install \
              keyring==23.8.2 \
              keyrings.google-artifactregistry-auth==1.0.0

            cat \<<EOF > "${HOME}/.pypirc"
            [distutils]
            index-servers =
              gcp

            [gcp]
            repository: https://${<< parameters.artifact-registry-region >>}-python.pkg.dev/${<< parameters.google-project-id >>}/pip
            EOF

            mkdir -p ~/.pip/
            cat \<<EOF > "${HOME}/.pip/pip.conf"
            [global]
            extra-index-url = https://${<< parameters.artifact-registry-region >>}-python.pkg.dev/${<< parameters.google-project-id >>}/pip/simple/
            EOF
