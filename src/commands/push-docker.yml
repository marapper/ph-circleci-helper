description: >
  Tag an existing docker image and pushes it to the registry

parameters:
  artifact-registry-url:
    type: env_var_name
    default: DOCKER_REGISTRY_URL
    description: |
      Name of environment variable storing the docker artifact registry url in the
      <region>-docker.pkg.dev/<project>/<name> format

  team:
    type: string
    description: |
      Name of the team owning the application.

  app:
    type: string
    description: |
      Name of the application.

  tag:
    type: string
    default: ""
    description: |
      Tag of the image built. If not given, defaults to '${CIRCLE_WORKFLOW_ID}.${CIRCLE_SHA1}'

  source-tag:
    type: string
    description: |
      Original tag of the image built. Will be retagged to match the Artifact registry format

  rolling-tag:
    type: boolean
    default: true
    description: |
      Whether or not to automatically push rolling tags for images.
      These rolling tags are designed for artifact registry cleanup and pinning the specific images remains
      the preferred method for updating images in ph-releaser.

  attest:
    type: boolean
    default: true
    description: |
      Whether or not to sign and add an attestation to the pushed image.

  attestation-project-id:
    type: env_var_name
    default: BINARY_AUTH_ATTESTATION_PROJECT_ID
    description: |
      Name of environment variable storing the Google project ID where the attestation is to be generated.

  attestator-name:
    type: env_var_name
    default: BINARY_AUTH_ATTESTOR_NAME
    description: |
      Name of environment variable storing the name of the attestator to be used.

  attestor-project-id:
    type: env_var_name
    default: BINARY_AUTH_ATTESTOR_PROJECT_ID
    description: |
      Name of environment variable storing the Google project ID where the attestor is located.

  attestation-kms-project:
    type: env_var_name
    default: BINARY_AUTH_ATTESTATION_KMS_PROJECT
    description: |
      Name of environment variable storing the Google project ID where the KMS 
      used for signing and verifying attestation is located.
  
  attestation-kms-location:
    type: env_var_name
    default: BINARY_AUTH_ATTESTATION_KMS_LOCATION
    description: |
      Name of environment variable storing the location where the KMS 
      used for signing and verifying attestation is located.
  
  attestation-kms-keyring:
    type: env_var_name
    default: BINARY_AUTH_ATTESTATION_KMS_KEYRING
    description: |
      Name of environment variable storing the keyring where the KMS 
      used for signing and verifying attestation is located.
  
  attestation-kms-key:
    type: env_var_name
    default: BINARY_AUTH_ATTESTATION_KMS_KEY
    description: |
      Name of environment variable storing the KMS key name used 
      for signing and verifying attestation is located.
    
  attestation-kms-key-version:
    type: env_var_name
    default: BINARY_AUTH_ATTESTATION_KMS_KEY_VERSION
    description: |
      Name of environment variable storing the KMS key version used 
      for signing and verifying attestation is located.
    
  attestation-service-account:
    type: env_var_name
    default: BINARY_AUTH_ATTESTATION_SERVICE_ACCOUNT
    description: |
      Name of environment variable storing the service account used
      for signing and adding attestations.

steps:
  - run:
      name: Set common env variables
      command: |
        echo "export IMAGE_URL=${<< parameters.artifact-registry-url >>}/<< parameters.team >>/<< parameters.app >>" >> "$BASH_ENV"

        if [[ -z "<< parameters.tag >>" ]]; then
          IMAGE_EXACT_TAG="${CIRCLE_WORKFLOW_ID}.${CIRCLE_SHA1}"
        else
          NON_NORMALIZED_IMAGE_EXACT_TAG="<< parameters.tag >>"
          # replaces all / with _ (https://tldp.org/LDP/abs/html/string-manipulation.html)
          IMAGE_EXACT_TAG=${NON_NORMALIZED_IMAGE_EXACT_TAG//\//_}
        fi
        echo "export IMAGE_EXACT_TAG=$IMAGE_EXACT_TAG" >> "$BASH_ENV"

        ROLLING_TAG=$CIRCLE_TAG
        # tags will be favored over branches
        if [[ -z "$CIRCLE_TAG" ]]; then
          ROLLING_TAG=$CIRCLE_BRANCH
        fi
        # replaces all / with - (https://tldp.org/LDP/abs/html/string-manipulation.html)
        ROLLING_TAG=${ROLLING_TAG//\//-}
        # lower case all strings
        ROLLING_TAG=$(echo $ROLLING_TAG | tr "[:upper:]" "[:lower:]")
        echo "export ROLLING_TAG=$ROLLING_TAG" >> "$BASH_ENV"
  - run:
      name: Push image
      command: |
        cat $BASH_ENV
        IMAGE="${IMAGE_URL}:${IMAGE_EXACT_TAG}"
        docker tag << parameters.source-tag >> $IMAGE
        docker push $IMAGE
  - when:
      condition: << parameters.rolling-tag >>
      steps:
        - run:
            name: Push rolling tag
            command: |
              IMAGE="${IMAGE_URL}:${ROLLING_TAG}"
              docker tag << parameters.source-tag >> $IMAGE
              docker push $IMAGE
  - when:
      condition: << parameters.attest >>
      steps:
        - run:
            name: Attest and sign artifact
            command: |
              # Fetch image digest
              IMAGE="${IMAGE_URL}:${IMAGE_EXACT_TAG}"
              IMAGE_DIGEST=$(docker images --no-trunc --quiet $IMAGE)
              echo $IMAGE_DIGEST
              ARTIFACT_URL="${IMAGE_URL}@${IMAGE_DIGEST}"

              ATTESTATION_LIST=$(gcloud beta container binauthz attestations list \
                --impersonate-service-account="${<< parameters.attestation-service-account >>}" \
                --artifact-url=$ARTIFACT_URL \
                --attestor="${<< parameters.attestator-name >>}" \
                --attestor-project="${<< parameters.attestor-project-id >>}" \
                --format=json)
              echo $ATTESTATION_lIST

              # If no attestation prior attestation are found, the API responds with an empty json array `[]`.
              # jq was not a prerequisites in prior versions of the orb, so we just do a bash string comparison for backwards compatibility
              if [[ $ATTESTATION_lIST = "[]" ]]; then
                gcloud beta container binauthz attestations sign-and-create \
                  --impersonate-service-account="${<< parameters.attestation-service-account >>}" \
                  --project="${<< parameters.attestation-project-id >>}" \
                  --artifact-url=$ARTIFACT_URL \
                  --attestor="${<< parameters.attestator-name >>}" \
                  --attestor-project="${<< parameters.attestor-project-id >>}" \
                  --keyversion-project="${<< parameters.attestation-kms-project >>}" \
                  --keyversion-location="${<< parameters.attestation-kms-location >>}" \
                  --keyversion-keyring="${<< parameters.attestation-kms-keyring >>}" \
                  --keyversion-key="${<< parameters.attestation-kms-key >>}" \
                  --keyversion="${<< parameters.attestation-kms-key-version >>}"
              else
                echo "Attestation already exists for this attestor(projects/${<< parameters.attestor-project-id >>}/attestator/${<< parameters.attestator-name >>}) and artifact-url(${ARTIFACT_URL}), skipping image signing."
              fi

              